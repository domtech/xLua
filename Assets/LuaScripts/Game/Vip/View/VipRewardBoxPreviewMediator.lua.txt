--- 为 VIP宝箱预览 提供实现
--- 回调函数具体见: PayBaseMediatorForLua 类的实现中对 Lua 函数的调用
--- 注: Lua组件或脚本间共享数据可以通过 G 表,但全局变量应该少用,以防止变量污染及内存占用释放等问题

--
local _itemFactory  -- 保存itemRender的工厂
local NotificationConst = CS.NotificationConst;
local DataCountUtils = CS.DataCountUtils;
local ProxyHelper = CS.ProxyHelper;
local UIEventListener = CS.UIEventListener;
local RewardObject = CS.RewardObject;

---@type BaseUIMediatorForLua
local _mediatorOwner -- 保存对应的Mediator

-- 同 MonoBehaviour.Start() 函数
function OnStart()
    _itemFactory = CS.ItemRendererFactory(
            function(itemGameObject)
                local itemRender = CS.BaseScriptItemRendererViewForLua(itemGameObject);
                return itemRender;  -- 返回创建的 ItemRender
            end
    );

    mGrid.itemFactory = _itemFactory;
    mGrid:onItemEvent('+', OnGetItemEvent);
    UIEventListener.Get(mBtn.gameObject).onClick = OnClickGet;
end

--- 处理Item的事件
---@param render IItemRenderer
---@param eventname string
---@param param object
function OnGetItemEvent(render, eventname, param)
    local switch = {
    };

    local fSwitch = switch[eventname];
    if fSwitch then
        fSwitch();
    end
end

--- 创建完视图后立即调用
---@param mediatorOwner PayBaseMediatorForLua
---@param data object
function OnPostCreateView( mediatorOwner, data )
    _mediatorOwner = mediatorOwner;

    mTitleLabel.text = CS.Language.GetContent("Vip002");
    mTipDes.text = CS.Language.GetContent("VIPDesc019");
    mTipsSub.text = CS.Language.GetContent("VIPDesc020");

    -- 给BI发送打点?
    DataCountUtils.SetEvent("VipRewardPreviewClick");
end

--- 由C#调用,刷新数据显示
---@param data object
function OnShowViewAndRefresh(data)
    Refresh();
end

---C#调用，在界面展示之前回调 
---@param data object
function BeforeShowView(data)
    Refresh();
end

--- 由C#调用
---@param data object
function OnShowViewNoRefresh(data)
end

--- 在WorldMapSceneManager.lua.txt中注册,被触发时由C#回调
function OnRewardInfo(data)
    --发送BI打点
    -- if data ~= nil then
    --     local gift = data;
    --     local paramDic = CS.GameUtil.GetCachedDcParam();
    --     paramDic:SetParam("GiftMetaId", gift.meta.id);
    --     paramDic:SetParam("whereFrom", 1);
    --     DataCountUtils.SetEvent("BuyGiftSuccess",paramDic);
    -- end
    
    --数据已返回，刷新界面展示
    Refresh();
end

--- 刷新数据显示
function Refresh()
    mGrid.data = RewardObject.ConvertToRewardList(CS.VipViewUtils.GetAllRewardByLevel());

    --按钮状态显示
    mBtn.text = ProxyHelper.vipProxy.hasReceivedLevelRewards and CS.Language.GetContent("emailActivityReward002") or CS.Language.GetContent("dragon_knight_003");
    mBtn.disableBg = ProxyHelper.vipProxy.hasReceivedLevelRewards;

end
--点击领取按钮 
---@param go gameObject
function OnClickGet(go)
    if (ProxyHelper.vipProxy.hasReceivedLevelRewards) then
        _mediatorOwner:SendNotification(NotificationConst.SHOW_NOTICE, CS.Language.GetContent("emailActivityReward002"));
    else
        local msg = CS.Doomsday.Protocol.CgPlayerVipLevelRewards();
        _mediatorOwner:SendMessage(msg);
        _mediatorOwner:HideView();
    end
end

-- 同 MonoBehaviour.OnDestroy() 函数
function OnDestroy()
    UIEventListener.Get(mBtn.gameObject).onClick = nil;
    mGrid:onItemEvent('-', OnGetItemEvent);
    _itemFactory:Dispose();    -- 释放占用的资源
    _itemFactory = nil;
end